homework3.c

#include <ti/devices/msp432p4xx/driverlib/driverlib.h>
#include "homework3.h"
#include "myGPIO.h"
#include "myTimer.h"

int main(void)
{
    // Count variables to control the LEDs.
    unsigned int count0 = 0;
    unsigned int count1 = 0;

    // TODO: Declare the variables that main uses to interact with your state machine.


    // Stops the Watchdog timer.
    initBoard();
    // Initialize the GPIO.
    // YOU MUST WRITE THIS FUNCTION IN myGPIO.c
    initGPIO();
    // Initialize Timer0 to provide a one second count interval for updating LED2.
    // YOU MUST WRITE THIS FUNCTION IN myTimer.c
    initTimer(TIMER32_0_BASE, TIMER0_PRESCALER, TIMER0_COUNT);
    // Initialize Timer1 to provide a one millisecond count interval for updating the button history.
    // YOU MUST WRITE THIS FUNCTION IN myTimer.c
    initTimer(TIMER32_1_BASE, TIMER1_PRESCALER, TIMER1_COUNT);
    //initialize system
    while(1)
    {

        // Update the color of LED2 using count0 as the index.
        // YOU MUST WRITE THIS FUNCTION BELOW.
        changeLaunchpadLED2(count0);

        // Update the color of the Boosterpack LED using count1 as the index.
        // YOU MUST WRITE THIS FUNCTION BELOW.
        changeBoosterpackLED(count1);

        // TODO: If Timer0 has expired, increment count0.
        // YOU MUST WRITE timer0expired IN myTimer.c
        if(timer0expired()) // calling timer0expired
            count0++;




        // TODO: If Timer1 has expired, update the button history from the pushbutton value.
        // YOU MUST WRITE timer1expired IN myTimer.c
        if(timer1expired()) //calling timer1expired function



        // TODO: Call the button state machine function to check for a completed, debounced button press.
        // YOU MUST WRITE THIS FUNCTION BELOW.



        // TODO: If a completed, debounced button press has occurred, increment count1.

      if(fsmBoosterpackButtonS1())
          count1++;

    }
}

void initBoard()
{
    WDT_A_hold(WDT_A_BASE);
}

// TODO: Map the value of a count variable to a color for LED2.
// Since count is an unsigned integer, you can mask the value in some way.
void changeLaunchpadLED2(unsigned int count)
{
    switch(count)
    {
        case 0:
            P1OUT = P1OUT | BIT0;// turn on P1.0 LED
            P2OUT = P2OUT & ~BIT0; // turn on P2.0
            P2OUT = P2OUT & ~BIT1;// turn off P2.1
            P2OUT = P2OUT & ~BIT2;// turn off P2.2
            break;
        case 10:
            P1OUT = P1OUT & ~BIT0;// turn off P1.0
            P2OUT = P2OUT | BIT0; // turn on P2.0
            P2OUT = P2OUT & ~BIT1;// turn off P2.1
            P2OUT = P2OUT & ~BIT2;// turn off P2.2
            break;
        case 21:
            P1OUT = P1OUT & ~BIT0; // turn off P1.0
            P2OUT = P2OUT & ~BIT0; // turn off P2.0
            P2OUT = P2OUT | BIT1;  // turn on P2.1
            P2OUT = P2OUT & ~BIT2; // turn off P2.2
            break;
        case 31:
            P1OUT = P1OUT & ~BIT0;// turn off p1.0
            P2OUT = P2OUT & ~BIT0; // turn on p2.0
            P2OUT = P2OUT & ~BIT1;// turn off P2.1
            P2OUT = P2OUT | BIT2;// turn off P2.2
            break;
    }



}

// TODO: Maybe the value of a count variable to a color for the Boosterpack LED
// This is essentially a copy of the previous function, using a different LED
void changeBoosterpackLED(unsigned int count)
{
    switch(count)
    {
        case 0: //count = 0
            P1OUT = P1OUT | BIT0;// turn on P1.0 LED
            P2OUT = P2OUT & ~BIT4; // turn on P2.4
            P2OUT = P2OUT & ~BIT6;// turn off P2.6
            P5OUT = P5OUT & ~BIT6;// turn off P5.6
            break;
        case 10: // count = 10
            P1OUT = P1OUT & ~BIT0;// turn off P1.0
            P2OUT = P2OUT | BIT6; // turn on P2.6
            P2OUT = P2OUT & ~BIT4;// turn off P2.4
            P5OUT = P5OUT & ~BIT6;// turn off P5.6
            break;
        case 21: // count = 21
            P1OUT = P1OUT & ~BIT0; // turn off P1.0
            P2OUT = P2OUT & ~BIT6; // turn off P2.6
            P2OUT = P2OUT | BIT4;  // turn on P2.4
            P5OUT = P5OUT & ~BIT6; // turn off P5.6
            break;
        case 31: // count =31
            P1OUT = P1OUT & ~BIT0;// turn off p1.0
            P2OUT = P2OUT & ~BIT6; // turn on p2.6
            P2OUT = P2OUT & ~BIT4;// turn off P2.4
            P5OUT = P5OUT | BIT6;// turn off P5.6
            break;
    }

}

// TODO: Create a button state machine.
// The button state machine should return true or false to indicate a completed, debounced button press.
bool fsmBoosterpackButtonS1(unsigned int buttonhistory)
{
    bool pressed = false;
    switch()// state machine switch case statement
    {}

    return pressed;
}
